/*
 * MemoryManagement.h
 *
 *  Created on: 07.01.2023
 *      Author: melah
 */

#ifndef MEMORYMANAGER_INC_MEMORYMANAGEMENT_H_
#define MEMORYMANAGER_INC_MEMORYMANAGEMENT_H_


#include "Memory.h"
#include "Persistable.h"
#include "gemue/bib/system/para/memory/MemoryManagementParaListener.h"
#include "gemue/bib/system/para/list/ParaList.h"
#include <map>

using namespace ParameterData;
using namespace std;

enum class EBlockID{
	infoBlock = 0x0001,
	paraBlock = 0x0002,
	defaultParaBlock = 0x0003,
	messageBlock = 0x0004

};
class MemoryManagement: public MemoryManagementParaListener{

public:
	vector<Memory*> m_memoryList;
	map<uint32_t, uint32_t>m_paraPowerDownList;
	uint32_t m_memoryCount;
	ParaList* paramList;

	MemoryManagement();
	~MemoryManagement();


	bool requestMemory(Persistable* persistObject);
	Memory* getMemoryById(uint32_t id);
	void readData();
	void writeData();

	void readMemory(Memory* memory);
	void readMemory(uint8_t* dst, Memory* memory, uint32_t addr, uint32_t size);
	uint32_t readMemory4Bytes(Memory* memory, uint32_t addr);
	uint16_t readMemory2Bytes(Memory* memory, uint32_t addr);
	uint8_t readMemory1Byte(Memory* memory, uint32_t addr);
	void readBlock(Memory* memory, MemoryNode* node);
	void writeBlock(Memory* memory, MemoryNode* node);


	/*******************************************************************************
	 * Die Routine wird aktiviert, wenn ein Parameter Wert oder ein Default Wert
	 * eines Parameters in den Festspeicher geschrieben werden soll.
	 *
	 * Achtung:
	 * Vor dem Zugriff auf die Daten des übergebenen Parameter Objekts muss der
	 * Zugriff auf den Wert angefordert werden. Nachdem die Daten gelesen oder
	 * geschrieben sind, muss der Zugriff wieder freigegeben werden.
	 *
	 * @param id			ID des Parameters, der gesichert werden muss.
	 * @param destination	Information, ob der Wert oder der Default Wert geändert
	 * 						wurde.
	 * @param paraSet		Parametersatz, dessen Wert sich geändert hat.
	 * @param value			Objekt, in dem der Parameter Wert verwaltet wird.
	 ******************************************************************************/
			virtual void writeParaValue(	uint32_t id,
											MEMORY_PARA_DESTINATION destination,
											uint32_t paraSet,
											InternalValue* value );

	/*******************************************************************************
	 * Die Routine wird informiert, wenn sich der Parameter Wert eines Parameters
	 * geändert hat, dieser aber erst bei Spannungsausfall gespeichert werden soll.
	 *
	 * @param id		ID des Parameters, der gesichert werden muss.
	 * @param paraSet	Parametersatz, dessen Wert sich geändert hat.
	 ******************************************************************************/
	 virtual void setWriteParaInfo(	uint32_t id, uint32_t paraSet );

	/*******************************************************************************
	 * Die Routine wird aktiviert, wenn der Listener im "ParaMemory" Objekt
	 * hinterlegt wird.
	 *
	 * Ihr wird das Objekt, in das die Parameter Werte geschrieben werden können,
	 * übergeben. In dieses Objekt werden die Daten, die aus dem Festspeicher
	 * gelesen werden, geschrieben.
	 *
	 * Achtung:
	 * Da erst der Parameter erzeugt und seine Verknüpfungen hergestellt werden,
	 * stehen die Objekte mit dem Parameterwert zur Verfügung, wenn die Listener
	 * der Speicherverwaltung hinterlegt werden.
	 *
	 * @param destination	Information, ob der Wert oder der Default Wert geändert
	 * 						wurde.
	 * @param value			Objekt, in dem der Parameter Wert verwaltet wird.
	 ******************************************************************************/
	 virtual void setValueData(	MEMORY_PARA_DESTINATION destination, InternalValue* value );


private:
	void registerMemory(Memory* memory);


};






#endif /* MEMORYMANAGER_INC_MEMORYMANAGEMENT_H_ */
